package view;

import java.sql.Connection;
import studentwellnessdb.DBConnection;
import studentwellnessdb.DbInit;
//import view.CounselorPanel;
import controller.CounselorController;
import controller.AppointmentController;
import controller.FeedbackController;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Appointment;
import model.Counselor;
import model.Feedback;

/**
 *
 * @author ferre
 */
public class MainDashboard extends javax.swing.JFrame {
    private final CounselorController controller = new CounselorController();
    private AppointmentController appointmentController = new AppointmentController();
    FeedbackController feedbackController = new FeedbackController();


    /**
     * Creates new form MainDashboard
     */
    public MainDashboard() {
        
        initComponents();
        // Load counselors into dropdown
        loadCounselors();
        // Set placeholders for date and time
        addPlaceholder(txtDate, "yyyy-mm-dd");
        addPlaceholder(txtTime, "HH:mm");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCounsoler = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        txtstudentname = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cmxCounselor = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        cmbStatus = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAppointment = new javax.swing.JTable();
        btnupdate = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        btnadd = new javax.swing.JButton();
        btnview = new javax.swing.JButton();
        txtTime = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtSpecialization = new javax.swing.JTextField();
        cmbAvailability = new javax.swing.JComboBox<>();
        btnAddCounselor = new javax.swing.JButton();
        btnDeleteCounselor = new javax.swing.JButton();
        btnViewCounselors = new javax.swing.JButton();
        btnUpdateCounselor = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCounsoler = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtFeedbackComment = new javax.swing.JTextArea();
        cmbFeedbackRating = new javax.swing.JComboBox<>();
        txtFeedbackStudent = new javax.swing.JTextField();
        btnDeleteFeedback = new javax.swing.JButton();
        btnSubmitFeedback = new javax.swing.JButton();
        btnEditFeedback = new javax.swing.JButton();
        btnViewFeedback = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblFeedback = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtstudentname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtstudentnameActionPerformed(evt);
            }
        });

        jLabel1.setText("Student Name:");

        cmxCounselor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmxCounselor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmxCounselorActionPerformed(evt);
            }
        });

        jLabel2.setText("Counselor ");

        jLabel3.setText("Date");

        jLabel4.setText("Time");

        txtDate.setText("yyyy-mm-dd");
        txtDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateActionPerformed(evt);
            }
        });

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Booked", "Cancelled", "Rescheduled" }));

        jLabel5.setText("Status");

        tblAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Student", "Counselor", "Date", "Time", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAppointmentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAppointment);

        btnupdate.setText("Update Appointment");
        btnupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupdateActionPerformed(evt);
            }
        });

        btndelete.setText("Delete Appointment");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });

        btnadd.setText("Add Appointment");
        btnadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddActionPerformed(evt);
            }
        });

        btnview.setText("View All  ");
        btnview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnviewActionPerformed(evt);
            }
        });

        txtTime.setText("XX:XX");
        txtTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 732, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(txtstudentname, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(cmxCounselor, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(178, 178, 178))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(btnadd)
                                .addGap(18, 18, 18)
                                .addComponent(btnupdate)
                                .addGap(18, 18, 18)
                                .addComponent(btndelete)
                                .addGap(18, 18, 18)
                                .addComponent(btnview)))
                        .addGap(118, 164, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(190, 190, 190))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtstudentname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmxCounselor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnupdate, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnview)
                        .addComponent(btnadd)
                        .addComponent(btndelete)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(125, Short.MAX_VALUE))
        );

        pnlCounsoler.addTab("Appointment", jPanel1);

        jLabel6.setText("Counselor Name: ");

        jLabel7.setText("Speciallization");

        jLabel8.setText("Availibility");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        cmbAvailability.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Unavailable" }));

        btnAddCounselor.setText("Add");
        btnAddCounselor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCounselorActionPerformed(evt);
            }
        });

        btnDeleteCounselor.setText("Delete");
        btnDeleteCounselor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCounselorActionPerformed(evt);
            }
        });

        btnViewCounselors.setText("View");
        btnViewCounselors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewCounselorsActionPerformed(evt);
            }
        });

        btnUpdateCounselor.setText("Update");
        btnUpdateCounselor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCounselorActionPerformed(evt);
            }
        });

        tblCounsoler.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Speciallization", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCounsoler.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCounsolerMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblCounsoler);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(btnAddCounselor))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtSpecialization, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                                .addComponent(txtName))
                            .addComponent(cmbAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(btnUpdateCounselor)
                                .addGap(69, 69, 69)
                                .addComponent(btnDeleteCounselor)
                                .addGap(42, 42, 42)
                                .addComponent(btnViewCounselors))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(386, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtSpecialization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cmbAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddCounselor)
                    .addComponent(btnDeleteCounselor)
                    .addComponent(btnViewCounselors)
                    .addComponent(btnUpdateCounselor))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
        );

        pnlCounsoler.addTab("Counselor", jPanel2);

        jLabel9.setText("Student Name:");

        jLabel10.setText("Comment:");

        jLabel11.setText("Rating:");

        txtFeedbackComment.setColumns(20);
        txtFeedbackComment.setRows(5);
        jScrollPane3.setViewportView(txtFeedbackComment);

        cmbFeedbackRating.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));

        btnDeleteFeedback.setText("Delete");
        btnDeleteFeedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteFeedbackActionPerformed(evt);
            }
        });

        btnSubmitFeedback.setText("Submit");
        btnSubmitFeedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitFeedbackActionPerformed(evt);
            }
        });

        btnEditFeedback.setText("Edit");
        btnEditFeedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditFeedbackActionPerformed(evt);
            }
        });

        btnViewFeedback.setText("View");
        btnViewFeedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewFeedbackActionPerformed(evt);
            }
        });

        tblFeedback.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Student", "Rating", "Comments "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFeedback.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFeedbackMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblFeedback);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel10)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9)
                                .addComponent(jLabel11))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmbFeedbackRating, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtFeedbackStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(btnSubmitFeedback)
                            .addGap(18, 18, 18)
                            .addComponent(btnEditFeedback)
                            .addGap(18, 18, 18)
                            .addComponent(btnDeleteFeedback)
                            .addGap(18, 18, 18)
                            .addComponent(btnViewFeedback))
                        .addComponent(jScrollPane3))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(384, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtFeedbackStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cmbFeedbackRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteFeedback)
                    .addComponent(btnSubmitFeedback)
                    .addComponent(btnEditFeedback)
                    .addComponent(btnViewFeedback))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlCounsoler.addTab("Feedback", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(pnlCounsoler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(pnlCounsoler)
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddActionPerformed
  try {
    String student = txtstudentname.getText().trim();
    String counselor = cmxCounselor.getSelectedItem().toString();
    String dateStr = txtDate.getText().trim();     // Format: yyyy-MM-dd
    String timeStr = txtTime.getText().trim();     // Format: HH:mm
    String status = cmbStatus.getSelectedItem().toString();

    if (student.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Student field is empty!");
        return;
    }
    if (dateStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Date field is empty!");
        return;
    }
    if (timeStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Time field is empty!");
        return;
    }
    
    //Validate Student Name
    if (!student.matches("[A-Za-z ]+")) {
    JOptionPane.showMessageDialog(this, "Student name should only contain letters and spaces.");
    return;
    }
    
    //Validate Date
    java.sql.Date sqlDate;
        try {
            // Convert date string to java.sql.Date
            sqlDate = java.sql.Date.valueOf(dateStr);
            java.time.LocalDate today = java.time.LocalDate.now();
            if (sqlDate.toLocalDate().isBefore(today)) {
                JOptionPane.showMessageDialog(this, "Date cannot be in the past.");
                return;
            }
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Use yyyy-MM-dd (e.g., 2025-07-20).");
            return;
        }

    // Validate time
        LocalTime time;
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
            time = LocalTime.parse(timeStr, formatter);

            LocalTime start = LocalTime.of(8, 0);   // 08:00
            LocalTime end = LocalTime.of(17, 0);    // 17:00
            if (time.isBefore(start) || time.isAfter(end)) {
                JOptionPane.showMessageDialog(this, "Appointments must be between 08:00 and 17:00.");
                return;
            }
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid time format. Use HH:mm (e.g., 14:30).");
            return;
        }

    Appointment appt = new Appointment(student, counselor, dateStr, timeStr, status);

    appointmentController.addAppointment(appt);

    JOptionPane.showMessageDialog(this, "Appointment added.");
    loadAppointmentsIntoTable();  // Refresh table
    clearAppointmentForm();      // Optional reset
} catch (Exception e) {
    JOptionPane.showMessageDialog(this, "Invalid date format or system error.");
    e.printStackTrace();
}

  // TODO add your handling code here:
    }//GEN-LAST:event_btnaddActionPerformed

    private void txtDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateActionPerformed

    private void txtstudentnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtstudentnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtstudentnameActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void btnEditFeedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditFeedbackActionPerformed
    try {
        int selectedRow = tblFeedback.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select feedback to edit.");
            return;
        }

        int id = Integer.parseInt(tblFeedback.getValueAt(selectedRow, 0).toString()); // ID must be first column
        String student = txtFeedbackStudent.getText().trim();
        int rating = Integer.parseInt(cmbFeedbackRating.getSelectedItem().toString());
        String comment = txtFeedbackComment.getText().trim();
        
        int confirm = JOptionPane.showConfirmDialog(this, "Do you want to save these changes?", "Confirm Update", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) return;

        feedbackController.updateFeedback(id, student, rating, comment);
        JOptionPane.showMessageDialog(this, "Feedback updated.");

        loadFeedbackIntoTable();
        clearFeedbackForm();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating feedback.");
    }    // TODO add your handling code here:
    }//GEN-LAST:event_btnEditFeedbackActionPerformed

    private void btnViewFeedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewFeedbackActionPerformed
    loadFeedbackIntoTable();        // TODO add your handling code here:
    }//GEN-LAST:event_btnViewFeedbackActionPerformed

    private void cmxCounselorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmxCounselorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmxCounselorActionPerformed

    private void txtTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimeActionPerformed

    private void btnAddCounselorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCounselorActionPerformed
    String name = txtName.getText().trim();
    String specialization = txtSpecialization.getText().trim();
    String availability = (String) cmbAvailability.getSelectedItem();

    // Validate input
    if (name.isEmpty() || specialization.isEmpty() || availability == null) {
        JOptionPane.showMessageDialog(this, "Please fill in all fields.");
        return;
    }
    
    //Blocks any input that is nonsensical
    if (!name.matches("[A-Za-z ]+") || name.length() < 2) {
        JOptionPane.showMessageDialog(this, "Counselor name must be at least 2 characters and only contain letters.");
        return;
    }
    if (specialization.trim().length() < 3) {
        JOptionPane.showMessageDialog(this, "Specialization must be at least 3 characters.");
        return;
    }

    // Add counselor
    controller.addCounselor(name, specialization, availability);

    // Success message
    JOptionPane.showMessageDialog(this, "Counselor added successfully.");

    // Refresh UI
    loadCounselors();            // Reload combo box
    loadCounselorsIntoTable();   // Reload JTable
    clearCounselorForm();        // Clear form fields
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddCounselorActionPerformed

    private void btnViewCounselorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewCounselorsActionPerformed
      loadCounselorsIntoTable();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnViewCounselorsActionPerformed

    private void btnUpdateCounselorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCounselorActionPerformed
      
    int selectedRow = tblCounsoler.getSelectedRow();
    
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a counselor to update.");
        return;
    }

    try {
        // Get ID from table
        int id = Integer.parseInt(tblCounsoler.getValueAt(selectedRow, 0).toString());

        // Get updated values from text fields
        String name = txtName.getText().trim();
        String specialization = txtSpecialization.getText().trim();
        String availability = cmbAvailability.getSelectedItem().toString();

        // Validate
        if (name.isEmpty() || specialization.isEmpty() || availability.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are required.");
            return;
        }

        // Update
        controller.updateCounselor(id, name, specialization, availability);
        int confirm = JOptionPane.showConfirmDialog(this, "Do you want to save these changes?", "Confirm Update", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) return;
        JOptionPane.showMessageDialog(this, "Counselor updated successfully.");

        // Refresh
        loadCounselorsIntoTable();
        clearForm();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateCounselorActionPerformed

    private void tblCounsolerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCounsolerMouseClicked
 int selectedRow = tblCounsoler.getSelectedRow();

    if (selectedRow != -1) {
        txtName.setText(tblCounsoler.getValueAt(selectedRow, 1).toString());
        txtSpecialization.setText(tblCounsoler.getValueAt(selectedRow, 2).toString());
        cmbAvailability.setSelectedItem(tblCounsoler.getValueAt(selectedRow, 3).toString());
    }        // TODO add your handling code here:
    }//GEN-LAST:event_tblCounsolerMouseClicked

    private void btnDeleteCounselorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCounselorActionPerformed
                                                   
    int selectedRow = tblCounsoler.getSelectedRow();

    // Check if any row is selected
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a counselor to delete.");
        return;
    }

    // Confirm deletion
    int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this counselor?", 
                                                "Confirm Deletion", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        return;
    }

    try {
        // Get counselor ID from first column
        int id = Integer.parseInt(tblCounsoler.getValueAt(selectedRow, 0).toString());

        // Call controller to delete
        controller.deleteCounselor(id);

        JOptionPane.showMessageDialog(this, "Counselor deleted successfully.");

        // Refresh table
        loadCounselorsIntoTable();
        clearForm();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        e.printStackTrace();
    }

 // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteCounselorActionPerformed

    private void btnupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupdateActionPerformed
 try {
        String student = txtstudentname.getText().trim();
        String counselor = cmxCounselor.getSelectedItem().toString();
        String dateStr = txtDate.getText().trim(); // yyyy-MM-dd
        String timeStr = txtTime.getText().trim(); // HH:mm
        String status = cmbStatus.getSelectedItem().toString();

        if (student.isEmpty() || dateStr.isEmpty() || timeStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.");
            return;
        }

        java.sql.Date sqlDate = java.sql.Date.valueOf(dateStr);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
        LocalTime.parse(timeStr, formatter); // Check if valid

        Appointment appt = new Appointment(student, counselor, sqlDate, timeStr, status);
        
        int confirm = JOptionPane.showConfirmDialog(this, "Do you want to save these changes?", "Confirm Update", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) return;
        
        appointmentController.updateAppointment(appt);

        JOptionPane.showMessageDialog(this, "Appointment updated.");
        loadAppointmentsIntoTable();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating appointment.");
    }    
        // TODO add your handling code here:
    }//GEN-LAST:event_btnupdateActionPerformed

    private void btnviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnviewActionPerformed
        loadAppointmentsIntoTable();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnviewActionPerformed

    private void tblAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAppointmentMouseClicked

    int selectedRow = tblAppointment.getSelectedRow();
    if (selectedRow != -1) {
        txtstudentname.setText(tblAppointment.getValueAt(selectedRow, 0).toString());
        cmxCounselor.setSelectedItem(tblAppointment.getValueAt(selectedRow, 1).toString());
        txtDate.setText(tblAppointment.getValueAt(selectedRow, 2).toString());
        txtTime.setText(tblAppointment.getValueAt(selectedRow, 3).toString());
        cmbStatus.setSelectedItem(tblAppointment.getValueAt(selectedRow, 4).toString());
    }

            // TODO add your handling code here:
    }//GEN-LAST:event_tblAppointmentMouseClicked

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
       try {
        int selectedRow = tblAppointment.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an appointment to delete.");
            return;
        }

        String student = tblAppointment.getValueAt(selectedRow, 0).toString();
        String dateStr = tblAppointment.getValueAt(selectedRow, 2).toString();  // Format: yyyy-MM-dd
        String timeStr = tblAppointment.getValueAt(selectedRow, 3).toString();  // Format: HH:mm

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this appointment?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        appointmentController.deleteAppointment(student, dateStr, timeStr);
        JOptionPane.showMessageDialog(this, "Appointment deleted successfully.");
        loadAppointmentsIntoTable();
        clearAppointmentForm();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting appointment.");
    }  // TODO add your handling code here:
    }//GEN-LAST:event_btndeleteActionPerformed

    private void btnSubmitFeedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitFeedbackActionPerformed
      try {
        String student = txtFeedbackStudent.getText().trim();
        int rating = Integer.parseInt(cmbFeedbackRating.getSelectedItem().toString());
        String comment = txtFeedbackComment.getText().trim();

        if (student.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Student name is required.");
            return;
        }
        //Validate Student Name
        if (!student.matches("[A-Za-z ]+")) {
            JOptionPane.showMessageDialog(this, "Student name should only contain letters and spaces.");
            return;
        }       

        feedbackController.submitFeedback(student, rating, comment);
        JOptionPane.showMessageDialog(this, "Feedback submitted.");

        loadFeedbackIntoTable(); // Refresh table
        clearFeedbackForm();     // Clear form
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error submitting feedback.");
    }  // TODO add your handling code here:
    }//GEN-LAST:event_btnSubmitFeedbackActionPerformed

    private void btnDeleteFeedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteFeedbackActionPerformed
      try {
        int selectedRow = tblFeedback.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select feedback to delete.");
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this feedback?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) return;

        int id = Integer.parseInt(tblFeedback.getValueAt(selectedRow, 0).toString());
        feedbackController.deleteFeedback(id);

        JOptionPane.showMessageDialog(this, "Feedback deleted.");
        loadFeedbackIntoTable();
        clearFeedbackForm();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting feedback.");
    }        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteFeedbackActionPerformed

    private void tblFeedbackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFeedbackMouseClicked
    int selectedRow = tblFeedback.getSelectedRow();
if (selectedRow != -1) {
    txtFeedbackStudent.setText(tblFeedback.getValueAt(selectedRow, 1).toString());
    cmbFeedbackRating.setSelectedItem(tblFeedback.getValueAt(selectedRow, 2).toString());
    txtFeedbackComment.setText(tblFeedback.getValueAt(selectedRow, 3).toString());
}
    // TODO add your handling code here:
    }//GEN-LAST:event_tblFeedbackMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try (Connection conn = DBConnection.getConnection()) {
            System.out.println("Connected to JavaDB!");
            DbInit.TableCreation();
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainDashboard().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCounselor;
    private javax.swing.JButton btnDeleteCounselor;
    private javax.swing.JButton btnDeleteFeedback;
    private javax.swing.JButton btnEditFeedback;
    private javax.swing.JButton btnSubmitFeedback;
    private javax.swing.JButton btnUpdateCounselor;
    private javax.swing.JButton btnViewCounselors;
    private javax.swing.JButton btnViewFeedback;
    private javax.swing.JButton btnadd;
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btnupdate;
    private javax.swing.JButton btnview;
    private javax.swing.JComboBox<String> cmbAvailability;
    private javax.swing.JComboBox<String> cmbFeedbackRating;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JComboBox<String> cmxCounselor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane pnlCounsoler;
    private javax.swing.JTable tblAppointment;
    private javax.swing.JTable tblCounsoler;
    private javax.swing.JTable tblFeedback;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextArea txtFeedbackComment;
    private javax.swing.JTextField txtFeedbackStudent;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSpecialization;
    private javax.swing.JTextField txtTime;
    private javax.swing.JTextField txtstudentname;
    // End of variables declaration//GEN-END:variables
   
    
    private void clearForm() {
    txtstudentname.setText("");
    txtDate.setText("");
    txtDate.setText("");
    cmxCounselor.setSelectedIndex(0);
    cmbStatus.setSelectedIndex(0);
    }
    private void clearCounselorForm() {
    txtName.setText("");
    txtSpecialization.setText("");
    cmbAvailability.setSelectedIndex(0);
}
private void clearAppointmentForm() {
    txtFeedbackStudent.setText("");
    cmxCounselor.setSelectedIndex(0);
    txtDate.setText("");
    txtTime.setText("");
    cmbStatus.setSelectedIndex(0);
}
private void clearFeedbackForm() {
    txtFeedbackStudent.setText("");
    txtFeedbackComment.setText("");
    cmbFeedbackRating.setSelectedIndex(0);
}

    
private void loadAppointmentsIntoTable() {
    DefaultTableModel model = (DefaultTableModel) tblAppointment.getModel();
    model.setRowCount(0); // Clear current rows

    List<Appointment> appointments = appointmentController.getAllAppointments();
    if (appointments != null) {
        for (Appointment appt : appointments) {
            model.addRow(new Object[]{
                appt.getStudent(),
                appt.getCounselor(),
                appt.getDate().toString(),
                appt.getTime(),
                appt.getStatus()
            });
        }
    }
}
private void loadFeedbackIntoTable() {
    try {
        List<Feedback> feedbackList = feedbackController.getAllFeedback();
        DefaultTableModel model = (DefaultTableModel) tblFeedback.getModel();

        // Clear existing rows
        model.setRowCount(0);

        // Add each feedback entry
        for (Feedback fb : feedbackList) {
            model.addRow(new Object[]{
                fb.getId(),
                fb.getStudent(),
                fb.getRating(),
                fb.getComments()
            });
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading feedback data.");
    }
}


    

  private void loadCounselors() {
    cmxCounselor.removeAllItems(); // Clear old items
    List<String> counselorNames = new CounselorController().getAllCounselorNames();
    
    for (String name : counselorNames) {
        cmxCounselor.addItem(name);
        }
    }    
  private void loadCounselorsIntoTable() {
    DefaultTableModel model = (DefaultTableModel) tblCounsoler.getModel();
    model.setRowCount(0); // Clear existing rows

    List<Counselor> list = controller.getAllCounselors();
    if (list != null) {
        for (Counselor c : list) {
            model.addRow(new Object[]{
                c.getId(), 
                c.getName(), 
                c.getSpecialization(), 
                c.getAvailability()
            });
        }
    }
}

private void addPlaceholder(javax.swing.JTextField field, String placeholder) {
    field.setText(placeholder);
    field.setForeground(java.awt.Color.GRAY);

    field.addFocusListener(new java.awt.event.FocusAdapter() {
        @Override
        public void focusGained(java.awt.event.FocusEvent e) {
            if (field.getText().equals(placeholder)) {
                field.setText("");
                field.setForeground(java.awt.Color.BLACK);
            }
        }

        @Override
        public void focusLost(java.awt.event.FocusEvent e) {
            if (field.getText().isEmpty()) {
                field.setText(placeholder);
                field.setForeground(java.awt.Color.GRAY);
            }
        }
    });
}

  
}

